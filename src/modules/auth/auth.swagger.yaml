openapi: 3.0.0
info:
  title: SecureAuth-Pro Auth API
  version: 2.0.0
  description: Endpoints de autenticación y recuperación de acceso.
  contact:
    name: SecureAuth-Pro
    url: https://github.com/Diegomarte9/SecureAuth-Pro
servers:
  - url: http://localhost:3000
    description: Local server
  - url: / # Relative for Docker
    description: Relative path

paths:
  /auth/signup:
    post:
      summary: Registro de usuario y envío de OTP
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDto'
      responses:
        201:
          description: Usuario registrado, OTP enviado
        400:
          description: Error de validación

  /auth/verify-otp:
    post:
      summary: Verifica el OTP recibido por email tras el registro
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOtpDto'
            example:
              email: johndoe@example.com
              code: "123456"
      responses:
        200:
          description: Usuario verificado correctamente
        400:
          description: OTP inválido o expirado

  /auth/login:
    post:
      summary: Login de usuario (solo usuarios verificados)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        200:
          description: Login exitoso, retorna access y refresh token
        401:
          description: Credenciales inválidas o usuario no verificado

  /auth/forgot-password:
    post:
      summary: Solicita un OTP para restablecer la contraseña
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDto'
            example:
              email: johndoe@example.com
      responses:
        200:
          description: Si el email existe, se envía un OTP de reseteo
        400:
          description: Error de validación

  /auth/reset-password:
    post:
      summary: Restablece la contraseña usando el OTP recibido por email
      tags: [Auth]
      description: >-
        Debes haber solicitado un OTP de reseteo y verificarlo aquí junto con la nueva contraseña.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
            example:
              email: johndoe@example.com
              code: "123456"
              newPassword: Password123!
              newPasswordConfirm: Password123!
      responses:
        200:
          description: Contraseña restablecida correctamente
        400:
          description: OTP inválido, expirado o error de validación

  /auth/refresh-token:
    post:
      summary: Refresca el access token usando el refresh token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        200:
          description: Nuevo access token
        401:
          description: Refresh token inválido o expirado

  /auth/logout:
    post:
      summary: Cierra sesión y revoca el refresh token
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: 4cb3058f-4aee-4ee9-aefa-0a1c95551d38
            example:
              refreshToken: 4cb3058f-4aee-4ee9-aefa-0a1c95551d38
      responses:
        200:
          description: Logout exitoso

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SignupDto:
      type: object
      required:
        - username
        - email
        - first_name
        - last_name
        - password
        - passwordConfirm
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        password:
          type: string
          format: password
          example: "Password123!"
        passwordConfirm:
          type: string
          format: password
          example: "Password123!"
    VerifyOtpDto:
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
        code:
          type: string
          minLength: 6
          maxLength: 6
    LoginDto:
      type: object
      required:
        - user
        - password
      properties:
        user:
          type: string
          description: Puede ser username o email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: "Password123!"
    ForgotPasswordDto:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
    ResetPasswordDto:
      type: object
      required:
        - email
        - code
        - newPassword
        - newPasswordConfirm
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
        code:
          type: string
          minLength: 6
          maxLength: 6
          example: "123456"
        newPassword:
          type: string
          format: password
          example: Password123!
        newPasswordConfirm:
          type: string
          format: password
          example: Password123! 